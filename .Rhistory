)
iceExt_arctic <- readRDS("~/PolarWatch/codebase/alaskaseaice-quarto/iceExt_arctic.rds")
View(iceExt_arctic)
iceExt_eb <- readRDS("~/PolarWatch/codebase/alaskaseaice-quarto/iceExt_eb.rds")
View(iceExt_eb)
View(iceExt_arctic)
View(iceExt_eb)
knitr::opts_chunk$set(echo = TRUE)
#list.of.packages <- c("ncdf4", "ncdf4.helpers", "ggplot2", "sf", "dplyr", "rerddapXtracto", "rerddap", "raster", "RColorBrewer", "AKmarineareas", "akmarineareas2", "lubridate")
pkgTest <- function(x){
if (!require(x,character.only = TRUE)){
install.packages(x,dep=TRUE,repos='http://cran.us.r-project.org')
if(!require(x,character.only = TRUE)) stop(x, " :Package not found")
}
}
list.of.packages <- c("ncdf4","ggplot2", "dplyr","raster", "AKmarineareas", "here",  "ncdf4.helpers", "akmarineareas2", "sf") # "RColorBrewer", "AKmarineareas", "akmarineareas2", "lubridate")
# Create list of installed packages
pkges = installed.packages()[,"Package"]
# Install and load all required pkgs
for (pk in list.of.packages) {
pkgTest(pk)
}
here::i_am("data-processing/2_eda.Rmd")
here()
ncsic <- nc_open(here("data", "sic85.nc"))
# time, ygrid, xgrid
ncarea <- nc_open(here("data","gridcell.nc"))
# y, x
seaice_raster <- stack(here("data","sic85.nc"))
# 281, 139, 39059, 522  (nrow, ncol, ncell, nlayers)
area_raster <- raster(here("data","gridcell.nc"))
# 281, 139 (y, x)
# class      : RasterStack
# dimensions : 281, 139, 39059, 522  (nrow, ncol, ncell, nlayers)
# resolution : 25000, 25000  (x, y)
# extent     : -3850000, -375000, -3e+06, 4025000  (xmin, xmax, ymin, ymax)
# crs        : NA
# names      : X1980.01.01, X1980.02.01, X1980.03.01, X1980.04.01, X1980.05.01, X1980.06.01, X1980.07.01, X1980.08.01, X1980.09.01, X1980.10.01, X1980.11.01, X1980.12.01, X1981.01.01, X1981.02.01, X1981.03.01, ...
# +proj=stere +lat_0=90 +lat_ts=70 +lon_0=-45 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs +type=crs
crs(seaice_raster) <- CRS('+init=EPSG:3413')
# plot one time step
plot(seaice_raster[[1]])
#image(seaice_raster[[1]])
hist(seaice_raster[[1]], main="Distribution of sic values",
col= "purple")
seaice_raster[seaice_raster > 1 ] <- 0
plot(seaice_raster[[1]])
names(AK_marine_area())
#  [1] "Area_Type"          "AreaID"             "Area_Name"          "BSIERP_ID"          "BSIERP_Region_Name" "Ecosystem_Area"
#  [7] "Ecosystem_Subarea"  "NMFS_REP_AREA"      "STAT_AREA"          "WATERS_COD"         "Shape_Length"       "Shape_Area"
# [13] "Shape"
# Here area is Area_Type
AK_marine_area(area = "Ecosystem Area")
AK_marine_area(area="Ecosystem Area")$Ecosystem_Area
AK_marine_area()
AK_marine_area(area="Ecosystem Subarea", prj="prj")%>%
ggplot()+
geom_sf(aes(fill=Ecosystem_Subarea))+
theme_void()
## Ecocsystem Area (Arctic)
AK_marine_area(area="Ecosystem Area", prj="prj")%>%
remove_dateline()%>%
ggplot()+
geom_sf(aes(fill=Ecosystem_Area))+
scale_fill_manual(values=c("Arctic" = "#00CCFF", "Other" = "#eeeeee"))+
theme(legend.position = "bottom")
#theme_void()
## Ecocsystem Area (Ebering)
AK_marine_area(area="Ecosystem Area", prj="prj")%>%
remove_dateline()%>%
ggplot()+
geom_sf(aes(fill=Ecosystem_Area))+
scale_fill_manual(values=c("Eastern Bering Sea" = "#CC99FF", "Other" = "#eeeeee"))+
theme(legend.position="bottom")
# Plot North Bering in Yellow
AK_marine_area(area="Ecosystem Subarea", prj="prj") %>%
remove_dateline() %>%
ggplot() +
geom_sf(aes(fill = Ecosystem_Subarea)) +
scale_fill_manual(values = c("Northern Bering Sea" = "#53BDA5", "Other" = "#eeeeee")) +
theme(legend.position = "bottom") #+# Specify your desired fill colors
#theme_void()
#ggplot()+geom_sf(data=nmfs)
esr_dd<-esr_dd
# Get area with standard and Alaska projection
eco_subarea_dd <- AK_marine_area(area="Ecosystem Subarea", prj="dd") #Northern Bering Sea
eco_area_dd <- AK_marine_area(area="Ecosystem Area", prj="dd")
eco_subarea_proj <- AK_marine_area(area="Ecosystem Subarea", prj="prj")
eco_area_proj <- AK_marine_area(area="Ecosystem Area", prj="prj")
# Check Area Name
eco_subarea_dd$Area_Name
# Get polygon (not projected)
nbering <- eco_subarea_dd[eco_subarea_dd$"Ecosystem_Subarea" =="Northern Bering Sea",]$Shape
#print(nbering)
# Check validity of geometry
st_is_valid(nbering, reason = TRUE)
# Make invalid valid
nbering_sf <- st_make_valid(nbering)
# Check nberinga_sf crs (4326)
#print(st_crs(nbering_sf))
# Transform to 3413
nbering_3413 <- st_transform(nbering_sf, crs=3413)
# Convert from simple feature to spatial object to use sp func
nbering_sp <- as(nbering_3413, "Spatial")
# Get area with standard and alaska projection
eco_subarea_dd <- AK_marine_area(area="Ecosystem Subarea", prj="dd") #Northern Bering Sea
eco_area_dd <- AK_marine_area(area="Ecosystem Area", prj="dd")
eco_subarea_proj <- AK_marine_area(area="Ecosystem Subarea", prj="prj")
eco_area_proj <- AK_marine_area(area="Ecosystem Area", prj="prj")
# Check Area Name
names(eco_area_dd)
eco_area_dd$Area_Name
# Get polygon
ebering <- eco_area_dd[eco_area_dd$"Ecosystem_Area" =="Eastern Bering Sea",]$Shape
#print(ebering)
# Check validity of geometry
st_is_valid(ebering, reason = TRUE)
# Make invalid valid
ebering_sf <- st_make_valid(ebering)
# Check nberinga_sf crs (4326)
#print(st_crs(ebering_sf))
# Transform to 3413
ebering_3413 <- st_transform(ebering_sf, crs=3413)
# Convert from simple feature to spatial object to use sp func
ebering_sp <- as(ebering_3413, "Spatial")
# Check Area Name
names(eco_area_dd)
eco_area_dd$Area_Name
# Get polygon
arctic <- eco_area_dd[eco_area_dd$"Ecosystem_Area" =="Arctic",]$Shape
#print(arctic)
# Check validity of geometry
st_is_valid(arctic, reason = TRUE)
# Make invalid valid
arctic_sf <- st_make_valid(arctic)
# Check nberinga_sf crs (4326)
print(st_crs(arctic_sf))
# Transform to 3413
arctic_3413 <- st_transform(arctic_sf, crs=3413)
# Convert from simple feature to spatial object to use sp func
arctic_sp <- as(arctic_3413, "Spatial")
# Convert from simple feature to spatial object to use sp func
plot(arctic_3413, main = "Arctic")
plot(nbering_3413, main = "N bering")
plot(ebering_3413, main = "EBering")
plot(arctic_3413, main = "Arctic")
# Plot the first raster
plot(seaice_raster[[1]], main="Sea Ice")
# Add the second raster with some transparency
plot(nbering_3413, add=TRUE, alpha=0.5)
plot(ebering_3413, add=TRUE, alpha=0.5)
plot(arctic_3413, add=TRUE, alpha=0.5)
# function to mask raster data
mask_it <- function(sat_dat, mask) {
crop_dat <- crop(sat_dat, mask)
mask_dat <- mask(crop_dat, mask)
return (mask_dat)
}
# Make SIC 0 or 1 with threshold (.15)
mod_sic <- function(dat) {
# Remove sic is NA or flag values
dat$sic_ext <- NA
# Extent 0 if <.15, 1 otherwise
dat <- dat %>%
mutate(sic_ext = if_else(sic > 1 | sic <.15, 0, 1))
# Area 0 if <.15, sic value otherwise
dat <- dat %>%
mutate(sic_ext = if_else(sic > 1 | sic <.15, 0, sic))
}
# Calculate extent
# Calculate extent
calc_extent <- function(dat, grdarea) {
dat <- dat[!is.na(dat$sic_ext),]
ext_df <- base::merge(dat, grdarea, by=c("y", "x"), all.x=TRUE)
extent <- sum(ext_df$sic_ext * ext_df$area) / 1000000
return (extent)
}
# Compute time
get_time_from_nc <- function(nc_file) {
to_dateformat <- nc.get.time.series(f = nc_file, time.dim.name = "time")
return (to_dateformat)
}
masked_area <- mask_it(area_raster, mask = arctic_sp)
masked_nbering <- mask_it(seaice_raster[[1]], mask = nbering_sp)
masked_ebering <- mask_it(seaice_raster[[1]], mask = ebering_sp)
masked_arctic <- mask_it(seaice_raster[[1]], mask = arctic_sp)
plot(masked_area, main = "grid cell area for arctic")
plot(masked_arctic, main = "sic in the arctic")
plot(masked_nbering, main = "sic in NBering")
plot(masked_ebering, main = "sic in EBering")
# Get date format
sic_dates <- get_time_from_nc(ncsic)
# Convert masked area to dataframe
area_df <- as.data.frame(masked_area, xy=TRUE)
names(area_df) <- c("x", "y", "area")
# Calculate extent for all time steps
ts <- nlayers(seaice_raster)
# Mask grid cell area
masked_area <- mask_it(area_raster, mask = nbering_sp)
# Convert to data frame
area_df <- as.data.frame(masked_area, xy = TRUE)
names(area_df) <- c("x", "y", "area")
# Create a variable for extent values
extent_df <- numeric(length(sic_dates))
for (i in 1:ts) {
sic_masked <- mask_it(seaice_raster[[i]], mask=nbering_sp)
sic_df <- as.data.frame(sic_masked, xy = TRUE)
names(sic_df) <- c("x", "y", "sic")
sic_cleaned <- mod_sic(sic_df)
extent <- calc_extent(sic_cleaned, area_df)
extent_df[i] <- extent
}
# Add dates to the extent values
ex_df <- data.frame(ex_date = sic_dates, extent = extent_df)
ex_df$ex_date <- as.Date(as.POSIXct(ex_df$ex_date))
# rm nc
#
library(lubridate)
library(dplyr)
# Get Top two years
ex_df <- ex_df %>%
mutate(
Year = year(ex_date),
Month = month(ex_date)
)
top_two_years <- ex_df %>%
arrange(desc(Year)) %>%
distinct(Year) %>%
slice(1:2) %>%
pull(Year)
print(top_two_years)
# Now, create the Highlight column
ex_df_label <-    ex_df %>%
mutate(
Year = year(ex_date),
YearLabel = case_when(
Year == top_two_years[1] ~ as.character(Year),    # First max
Year == top_two_years[2] ~ as.character(Year), # Second max
TRUE ~ "Previous"                        # All other yearsx
)
)
summary(ex_df)
#
library(lubridate)
library(dplyr)
# Get Top two years
ex_df <- ex_df %>%
mutate(
Year = year(ex_date),
Month = month(ex_date)
)
top_two_years <- ex_df %>%
arrange(desc(Year)) %>%
distinct(Year) %>%
slice(1:2) %>%
pull(Year)
print(top_two_years)
# Now, create the Highlight column
ex_df_label <-    ex_df %>%
mutate(
Year = year(ex_date),
YearLabel = case_when(
Year == top_two_years[1] ~ as.character(Year),    # First max
Year == top_two_years[2] ~ as.character(Year), # Second max
TRUE ~ "Previous"                        # All other yearsx
)
)
summary(ex_df)
month_order <- month.abb
ex_df_label$MonthName <- factor(month.abb[ex_df_label$Month], levels = month_order)
ex_df_label$extent_mil <- round(ex_df_label$extent / 1000000, 2)
names(ex_df_label)
# save for Eastern Bering
#saveRDS(ex_df_label, file = here("shiny-app", "iceExt_eb.rds"))
# save for Northern Bering
saveRDS(ex_df_label, file =  here("shiny-app", "iceExt_nb.rds"))
# save for Arctic
#saveRDS(ex_df_label, file =  here("shiny-app", "iceExt_arctic.rds"))
sic_masked <- mask_it(seaice_raster[[i]], mask=ebering_sp)
# Get date format
sic_dates <- get_time_from_nc(ncsic)
# Convert masked area to dataframe
area_df <- as.data.frame(masked_area, xy=TRUE)
names(area_df) <- c("x", "y", "area")
# Calculate extent for all time steps
ts <- nlayers(seaice_raster)
## change name!!!
# Mask grid cell area
masked_area <- mask_it(area_raster, mask = ebering_sp)
# Convert to data frame
area_df <- as.data.frame(masked_area, xy = TRUE)
names(area_df) <- c("x", "y", "area")
# Create a variable for extent values
extent_df <- numeric(length(sic_dates))
for (i in 1:ts) {
sic_masked <- mask_it(seaice_raster[[i]], mask=ebering_sp)
sic_df <- as.data.frame(sic_masked, xy = TRUE)
names(sic_df) <- c("x", "y", "sic")
sic_cleaned <- mod_sic(sic_df)
extent <- calc_extent(sic_cleaned, area_df)
extent_df[i] <- extent
}
# Add dates to the extent values
ex_df <- data.frame(ex_date = sic_dates, extent = extent_df)
ex_df$ex_date <- as.Date(as.POSIXct(ex_df$ex_date))
# rm nc
# Get date format
sic_dates <- get_time_from_nc(ncsic)
# Convert masked area to dataframe
area_df <- as.data.frame(masked_area, xy=TRUE)
names(area_df) <- c("x", "y", "area")
# Calculate extent for all time steps
ts <- nlayers(seaice_raster)
## change name!!!
# Mask grid cell area
masked_area <- mask_it(area_raster, mask = ebering_sp)
# Convert to data frame
area_df <- as.data.frame(masked_area, xy = TRUE)
names(area_df) <- c("x", "y", "area")
# Create a variable for extent values
extent_df <- numeric(length(sic_dates))
for (i in 1:ts) {
sic_masked <- mask_it(seaice_raster[[i]], mask=ebering_sp)
sic_df <- as.data.frame(sic_masked, xy = TRUE)
names(sic_df) <- c("x", "y", "sic")
sic_cleaned <- mod_sic(sic_df)
extent <- calc_extent(sic_cleaned, area_df)
extent_df[i] <- extent
}
# Get date format
sic_dates <- get_time_from_nc(ncsic)
# Convert masked area to dataframe
area_df <- as.data.frame(masked_area, xy=TRUE)
names(area_df) <- c("x", "y", "area")
# Calculate extent for all time steps
ts <- nlayers(seaice_raster)
## change name!!!
# Mask grid cell area
masked_area <- mask_it(area_raster, mask = ebering_sp)
# Convert to data frame
area_df <- as.data.frame(masked_area, xy = TRUE)
names(area_df) <- c("x", "y", "area")
# Create a variable for extent values
extent_df <- numeric(length(sic_dates))
for (i in 1:ts) {
sic_masked <- mask_it(seaice_raster[[i]], mask=ebering_sp)
sic_df <- as.data.frame(sic_masked, xy = TRUE)
names(sic_df) <- c("x", "y", "sic")
sic_cleaned <- mod_sic(sic_df)
extent <- calc_extent(sic_cleaned, area_df)
extent_df[i] <- extent
}
# Add dates to the extent values
ex_df <- data.frame(ex_date = sic_dates, extent = extent_df)
ex_df$ex_date <- as.Date(as.POSIXct(ex_df$ex_date))
# rm nc
#
library(lubridate)
library(dplyr)
# Get Top two years
ex_df <- ex_df %>%
mutate(
Year = year(ex_date),
Month = month(ex_date)
)
top_two_years <- ex_df %>%
arrange(desc(Year)) %>%
distinct(Year) %>%
slice(1:2) %>%
pull(Year)
print(top_two_years)
# Now, create the Highlight column
ex_df_label <-    ex_df %>%
mutate(
Year = year(ex_date),
YearLabel = case_when(
Year == top_two_years[1] ~ as.character(Year),    # First max
Year == top_two_years[2] ~ as.character(Year), # Second max
TRUE ~ "Previous"                        # All other yearsx
)
)
summary(ex_df)
month_order <- month.abb
ex_df_label$MonthName <- factor(month.abb[ex_df_label$Month], levels = month_order)
ex_df_label$extent_mil <- round(ex_df_label$extent / 1000000, 2)
names(ex_df_label)
# save for Eastern Bering
saveRDS(ex_df_label, file = here("shiny-app", "iceExt_eb.rds"))
# save for Northern Bering
#saveRDS(ex_df_label, file =  here("shiny-app", "iceExt_nb.rds"))
# save for Arctic
#saveRDS(ex_df_label, file =  here("shiny-app", "iceExt_arctic.rds"))
# Get date format
sic_dates <- get_time_from_nc(ncsic)
# Convert masked area to dataframe
area_df <- as.data.frame(masked_area, xy=TRUE)
names(area_df) <- c("x", "y", "area")
# Calculate extent for all time steps
ts <- nlayers(seaice_raster)
## change name!!!
# Mask grid cell area
masked_area <- mask_it(area_raster, mask = arctic_sp)
# Convert to data frame
area_df <- as.data.frame(masked_area, xy = TRUE)
names(area_df) <- c("x", "y", "area")
# Create a variable for extent values
extent_df <- numeric(length(sic_dates))
for (i in 1:ts) {
sic_masked <- mask_it(seaice_raster[[i]], mask=arctic_sp)
sic_df <- as.data.frame(sic_masked, xy = TRUE)
names(sic_df) <- c("x", "y", "sic")
sic_cleaned <- mod_sic(sic_df)
extent <- calc_extent(sic_cleaned, area_df)
extent_df[i] <- extent
}
# Add dates to the extent values
ex_df <- data.frame(ex_date = sic_dates, extent = extent_df)
ex_df$ex_date <- as.Date(as.POSIXct(ex_df$ex_date))
# rm nc
#
library(lubridate)
library(dplyr)
# Get Top two years
ex_df <- ex_df %>%
mutate(
Year = year(ex_date),
Month = month(ex_date)
)
top_two_years <- ex_df %>%
arrange(desc(Year)) %>%
distinct(Year) %>%
slice(1:2) %>%
pull(Year)
print(top_two_years)
# Now, create the Highlight column
ex_df_label <-    ex_df %>%
mutate(
Year = year(ex_date),
YearLabel = case_when(
Year == top_two_years[1] ~ as.character(Year),    # First max
Year == top_two_years[2] ~ as.character(Year), # Second max
TRUE ~ "Previous"                        # All other yearsx
)
)
summary(ex_df)
month_order <- month.abb
ex_df_label$MonthName <- factor(month.abb[ex_df_label$Month], levels = month_order)
ex_df_label$extent_mil <- round(ex_df_label$extent / 1000000, 2)
names(ex_df_label)
# save for Eastern Bering
#saveRDS(ex_df_label, file = here("shiny-app", "iceExt_eb.rds"))
# save for Northern Bering
#saveRDS(ex_df_label, file =  here("shiny-app", "iceExt_nb.rds"))
# save for Arctic
saveRDS(ex_df_label, file =  here("shiny-app", "iceExt_arctic.rds"))
View(ex_df)
iceExt_eb <- readRDS("~/PolarWatch/codebase/alaskaseaice-quarto/iceExt_eb.rds")
iceExt_nb <- readRDS("~/PolarWatch/codebase/alaskaseaice-quarto/iceExt_nb.rds")
View(iceExt_eb)
View(iceExt_nb)
View(iceExt_eb)
View(iceExt_nb)
View(iceExt_eb)
View(iceExt_nb)
install.packages("gt")
dfile |>
gt() |>
tab_options(
table.font.size = px(12), #< because I've made the slides a lot bigger
column_labels.font.size = px(12) #< normally don't have to increase this
)
install.packages("gtExtras")
dfile |>
gt() |>
tab_options(
table.font.size = px(12), #< because I've made the slides a lot bigger
column_labels.font.size = px(12) #< normally don't have to increase this
)
dfile%>%
gt%>%
tab_options(
table.font.size = px(12), #< because I've made the slides a lot bigger
column_labels.font.size = px(12) #< normally don't have to increase this
)
dfile%>%
gt%>%
tab_options(
table.font.size = px(12), #< because I've made the slides a lot bigger
column_labels.font.size = px(12) #< normally don't have to increase this
)
library(gt)
dfile%>%
gt%>%
tab_options(
table.font.size = px(12), #< because I've made the slides a lot bigger
column_labels.font.size = px(12) #< normally don't have to increase this
)
library(gt)
previous%>%
gt%>%
tab_options(
table.font.size = px(12), #< because I've made the slides a lot bigger
column_labels.font.size = px(12) #< normally don't have to increase this
)
library(gt)
all_data <- previous %>%
outer_join(dfile[dfile$Year == lastYear, c("MonthName", "extent_mil") ], by = "MonthName") %>%
outer_join(dfile[dfile$Year == currentYear, c("MonthName", "extent_mil") ], by = "MonthName")
library(gt)
all_data <- previous %>%
left_join(dfile[dfile$Year == lastYear, c("MonthName", "extent_mil") ], by = "MonthName") %>%
left_join(dfile[dfile$Year == currentYear, c("MonthName", "extent_mil") ], by = "MonthName")
